# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/http-parser/all/http-parser.rbi
#
# http-parser-1.2.1
module HttpParser
  def err_desc(*arg0); end
  def err_name(*arg0); end
  def http_body_is_final(*arg0); end
  def http_parser_execute(*arg0); end
  def http_parser_init(*arg0); end
  def http_should_keep_alive(*arg0); end
  def self.err_desc(*arg0); end
  def self.err_name(*arg0); end
  def self.http_body_is_final(*arg0); end
  def self.http_parser_execute(*arg0); end
  def self.http_parser_init(*arg0); end
  def self.http_should_keep_alive(*arg0); end
  extend FFI::Library
end
class HttpParser::Error < StandardError
end
class HttpParser::Error::OK < HttpParser::Error
end
class HttpParser::Error::CALLBACK < HttpParser::Error
end
class HttpParser::Error::INVALID_EOF_STATE < HttpParser::Error
end
class HttpParser::Error::HEADER_OVERFLOW < HttpParser::Error
end
class HttpParser::Error::CLOSED_CONNECTION < HttpParser::Error
end
class HttpParser::Error::INVALID_VERSION < HttpParser::Error
end
class HttpParser::Error::INVALID_STATUS < HttpParser::Error
end
class HttpParser::Error::INVALID_METHOD < HttpParser::Error
end
class HttpParser::Error::INVALID_URL < HttpParser::Error
end
class HttpParser::Error::INVALID_HOST < HttpParser::Error
end
class HttpParser::Error::INVALID_PORT < HttpParser::Error
end
class HttpParser::Error::INVALID_PATH < HttpParser::Error
end
class HttpParser::Error::INVALID_QUERY_STRING < HttpParser::Error
end
class HttpParser::Error::INVALID_FRAGMENT < HttpParser::Error
end
class HttpParser::Error::LF_EXPECTED < HttpParser::Error
end
class HttpParser::Error::INVALID_HEADER_TOKEN < HttpParser::Error
end
class HttpParser::Error::INVALID_CONTENT_LENGTH < HttpParser::Error
end
class HttpParser::Error::INVALID_CHUNK_SIZE < HttpParser::Error
end
class HttpParser::Error::INVALID_CONSTANT < HttpParser::Error
end
class HttpParser::Error::INVALID_INTERNAL_STATE < HttpParser::Error
end
class HttpParser::Error::STRICT < HttpParser::Error
end
class HttpParser::Error::PAUSED < HttpParser::Error
end
class HttpParser::Error::UNKNOWN < HttpParser::Error
end
class HttpParser::Instance < FFI::Struct
  def data; end
  def error!; end
  def error; end
  def error?; end
  def final_chunk?; end
  def flags; end
  def http_major; end
  def http_method; end
  def http_minor; end
  def http_status; end
  def http_version; end
  def initialize(ptr = nil); end
  def keep_alive?; end
  def reset!(new_type = nil); end
  def stop!; end
  def type; end
  def type=(new_type); end
  def upgrade?; end
end
class HttpParser::FieldData < FFI::Struct
end
class HttpParser::HttpParserUrl < FFI::Struct
end
class HttpParser::Settings < FFI::Struct
end
class HttpParser::Parser
  def initialize(callback_obj = nil); end
  def on_body(&block); end
  def on_chunk_complete(&block); end
  def on_chunk_header(&block); end
  def on_header_field(&block); end
  def on_header_value(&block); end
  def on_headers_complete(&block); end
  def on_message_begin(&block); end
  def on_message_complete(&block); end
  def on_status(&block); end
  def on_url(&block); end
  def parse(inst, data); end
  def self.new_instance(&block); end
end
class HttpParser::Parser::Callback < FFI::Function
  def self.new(&block); end
end
class HttpParser::Parser::DataCallback < FFI::Function
  def self.new(&block); end
end
